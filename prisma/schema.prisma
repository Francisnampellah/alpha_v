// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  NOTACTIVE
  PENDING
}


model User {
  id           Int    @id @default(autoincrement())
  name         String   
  email        String    @unique
  password     String
  status       UserStatus @default(PENDING)
  role         UserRole   @default(USER)
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}


model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  technologies String[] // Array of technologies used
  demoUrl     String?
  githubUrl   String?
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String?
  content     Json? 
  blocks      Json?
  imageUrl    String?
  isVirtual   Boolean  @default(false)
  registrationUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  author      TeamMember @relation(fields: [authorId], references: [id])
  authorId    String
  imageUrl    String?
  content     Json? 
  blocks      Json?
  tags        String[]
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Career {
  id          String   @id @default(cuid())
  title       String
  department  String
  location    String
  description String   @db.Text
  requirements String[]
  isRemote    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  applications JobApplication[]
}

model JobApplication {
  id          String   @id @default(cuid())
  career      Career   @relation(fields: [careerId], references: [id])
  careerId    String
  fullName    String
  email       String
  resumeUrl   String
  coverLetter String?  @db.Text
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEWING
  ACCEPTED
  REJECTED
}

model NewsletterSubscription {
  id          String   @id @default(cuid())
  email       String   @unique
  isActive    Boolean  @default(true)
  subscribedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactMessage {
  id          String   @id @default(cuid())
  name        String
  email       String
  subject     String
  message     String   @db.Text
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id          String   @id @default(cuid())
  clientName  String
  company     String?
  content     String   @db.Text
  rating      Int      @default(5)
  imageUrl    String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeamMember {
  id          String   @id @default(cuid())
  name        String
  position    String
  bio         String   @db.Text
  imageUrl    String?
  email       String   @unique
  socialLinks Json?    // Store social media links
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blogPosts   Blog[]
}


